unit lifeGame;

{$mode objfpc}{$H+}

interface

const MAX_WIDTH= 1000;
      MAX_HEIGHT= 1000;

type
     RangoFilas= 1..MAX_HEIGHT;
     RangoColumnas= 1..MAX_WIDTH;
     LifeGrid= record
        cells: array[RangoFilas,RangoColumnas] of boolean;
        topW, topH: integer;
     end;
     LifeField= record
         celulasVivas: lifeGrid;
         nuevaGeneracion: lifeGrid;
         generaciones: longint;
         poblacion: longint;
     end;

procedure init(h: RangoFilas; w: RangoColumnas; var l: lifeField);

procedure nextGeneration(var l: lifeField);

function getCircundantes(i: RangoFilas; j:RangoColumnas; var l: lifeField): byte;

function sonCoordenadasValidas(i, j: integer; var l: lifeField): boolean;

procedure insertarCelula(i, j: integer; var l: lifeField);

implementation

procedure init(h: RangoFilas; w: RangoColumnas; var l: lifeField);
var i, j: integer;
begin
  randomize;

  with l do begin
      celulasVivas.topH:= h;
      celulasVivas.topW:= w;
      nuevaGeneracion.topH:= h;
      nuevaGeneracion.topW:= w;
      generaciones:= 1;
      poblacion:= 0;

      for i:= 1 to celulasVivas.topH do begin
          for j:= 1 to celulasVivas.topW do begin
              celulasVivas.cells[i,j]:= random(2)=1;
              if celulasVivas.cells[i,j] then poblacion+=1;
          end;
      end;
  end;
end;

procedure nextGeneration(var l: lifeField);
var i, j: integer;
begin
  with l do begin
     l.generaciones+=1;
     l.poblacion:= 0;

     for i:= 1 to celulasVivas.topH do begin
          for j:= 1 to celulasVivas.topW do begin
              if not celulasVivas.cells[i,j] then
                  nuevaGeneracion.cells[i,j]:= getCircundantes(i,j,l)=3
              else
                  nuevaGeneracion.cells[i,j]:= (getCircundantes(i,j,l)=2) or (getCircundantes(i,j,l)=3);

              if nuevaGeneracion.cells[i,j] then l.poblacion+= 1;
          end;
      end;

      for i:= 1 to celulasVivas.topH do begin
          for j:= 1 to celulasVivas.topW do begin
              celulasVivas.cells[i,j]:= nuevaGeneracion.cells[i,j];
          end;
      end;
  end;
end;

function getCircundantes(i: RangoFilas; j: RangoColumnas; var l: lifeField ): byte;
var c: byte;
begin
   c:= 0;

   if sonCoordenadasValidas(i-1,j-1,l) and l.celulasVivas.cells[i-1,j-1] then
       c+=1;
   if sonCoordenadasValidas(i-1,j,l) and l.celulasVivas.cells[i-1,j] then
       c+=1;
   if sonCoordenadasValidas(i+1,j-1,l) and l.celulasVivas.cells[i+1,j-1] then
       c+=1;
   if sonCoordenadasValidas(i,j-1,l) and l.celulasVivas.cells[i,j-1] then
       c+=1;
   if sonCoordenadasValidas(i,j+1,l) and l.celulasVivas.cells[i,j+1] then
       c+=1;
   if sonCoordenadasValidas(i-1,j+1,l) and l.celulasVivas.cells[i-1,j+1] then
       c+=1;
   if sonCoordenadasValidas(i+1,j,l) and l.celulasVivas.cells[i+1,j] then
       c+=1;
   if sonCoordenadasValidas(i+1,j+1,l) and l.celulasVivas.cells[i+1,j+1] then
       c+=1;

   result:= c;
end;

function sonCoordenadasValidas(i, j: integer; var l: lifeField): boolean;
begin
  result:= (i>=1) and (i<=l.celulasVivas.topH) and (j>=1) and (j<=l.celulasVivas.topW);
end;

procedure insertarCelula(i, j: integer; var l: lifeField);
begin
  if not l.celulasVivas.cells[i,j] then begin
      l.celulasVivas.cells[i,j]:= true;
      l.poblacion+=1;
  end;
end;


end.

